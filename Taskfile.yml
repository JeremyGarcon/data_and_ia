version: '3'

tasks:
  run:
    cmds:
      - bash -c "if [ ! -d 'env_app' ]; then python3 -m venv env_app; fi"
      - bash -c "source env_app/bin/activate && pip install --no-cache-dir -r requirements.txt && python3 main.py"
    desc: 
      Crée un environnement virtuel via requirements.txt (s'il n'existe pas),
      installe les dépendances (sans utiliser le cache),
      et lance l'application.

  create_env:
    cmds:
      - bash -c "if [ ! -d 'env_app' ]; then python3 -m venv env_app; else echo \"L'environnement virtuel existe déjà\"; fi"
      - bash -c "if [ -d 'env_app' ]; then source env_app/bin/activate && pip install --no-cache-dir -r requirements.txt; else echo \"L'environnement virtuel n'existe pas\"; fi"
    desc: Crée un environnement virtuel avec requirements.txt (s'il n'existe pas) et installe les dépendances.

  view_power:
    cmds:
      - bash -c "if [ -d 'env_app' ]; then source env_app/bin/activate && python3 src/view_data/view_power.py; else echo \"L'environnement virtuel n'existe pas\"; fi"
    desc: Active l'environnement virtuel s'il existe et exécute le script view_power.py.

  view_temperature:
    cmds:
      - bash -c "if [ -d 'env_app' ]; then source env_app/bin/activate && python3 src/view_data/view_temperature.py; else echo \"L'environnement virtuel n'existe pas\"; fi"
    desc: Active l'environnement virtuel s'il existe et exécute le script view_temperature.py.

  delete_env:
    cmds:
      - bash -c "if [ -d 'env_app' ]; then rm -rf env_app; else echo 'L'environnement python n'existe pas'; fi"
    desc: Supprime l'environnement virtuel s'il existe.

  build:
    cmds:
      - bash -c "if [ -d 'env_app' ]; then source env_app/bin/activate && pyinstaller --onefile --add-data 'src/app/*:src/app' --hidden-import='PIL._tkinter_finder' --distpath dist --workpath build main.py; else echo 'L'environnement virtuel n'existe pas'; fi"
    desc: Compile l'application avec PyInstaller dans un exécutable unique et place les fichiers de construction dans les répertoires dist et build.

  destroy_build:
    cmds:
      # Supprime les répertoires dist et build créés par PyInstaller
      - bash -c "rm -rf dist/*;"
      - bash -c "rm -rf build/*;"
    desc: Supprime les répertoires 'dist' et 'build' créés lors du processus de construction.

  run_build:
    cmds:
      # Exécute l'exécutable généré dans le répertoire dist
      - bash -c "if [ -f 'dist/main' ]; then ./dist/main; else echo 'L'exécutable n'existe pas'; fi"
    desc: Exécute l'exécutable généré par PyInstaller situé dans le répertoire dist.